{"version":3,"sources":["../src/array/index.ts","../src/array/range.ts","../src/array/shuffle.ts","../src/bigint/index.ts","../src/u8a/toBigInt.ts","../src/is/hex.ts","../src/hex/stripPrefix.ts","../src/hex/toU8a.ts","../src/hex/toBigInt.ts","../src/is/bn.ts","../src/is/toBigInt.ts","../src/is/toBn.ts","../src/bigint/toBigInt.ts","../src/u8a/index.ts","../src/u8a/empty.ts","../src/has.ts","../src/is/buffer.ts","../src/is/u8a.ts","../src/string/toU8a.ts","../src/u8a/toU8a.ts","../src/u8a/eq.ts","../src/u8a/fixLength.ts","../src/u8a/toBn.ts","../src/u8a/toFloat.ts","../src/u8a/toHex.ts","../src/u8a/toNumber.ts","../src/u8a/toString.ts","../src/u8a/concat.ts","../src/base58/toBase58.ts","../src/u8a/toBase58.ts","../src/bigint/toU8a.ts","../src/bigint/toHex.ts","../src/bn/index.ts","../src/hex/toBn.ts","../src/is/bigint.ts","../src/bn/toBn.ts","../src/bn/toU8a.ts","../src/bn/toHex.ts","../src/bn/consts.ts","../src/buffer/index.ts","../src/buffer/toU8a.ts","../src/compact/index.ts","../src/compact/toU8a.ts","../src/compact/addLength.ts","../src/compact/fromU8a.ts","../src/compact/stripLength.ts","../src/float/index.ts","../src/float/toU8a.ts","../src/hex/index.ts","../src/hex/hasPrefix.ts","../src/hex/addPrefix.ts","../src/hex/fixLength.ts","../src/hex/toNumber.ts","../src/hex/toString.ts","../src/is/index.ts","../src/is/array.ts","../src/is/string.ts","../src/is/ascii.ts","../src/is/boolean.ts","../src/is/error.ts","../src/is/function.ts","../src/stringify.ts","../src/is/jsonObject.ts","../src/is/null.ts","../src/is/number.ts","../src/is/object.ts","../src/is/undefined.ts","../src/is/utf8.ts","../src/number/index.ts","../src/number/toHex.ts","../src/number/toU8a.ts","../src/base58/index.ts","../src/base58/toU8a.ts","../src/base64/index.ts","../src/base64/toBase64.ts","../src/base64/toU8a.ts","../src/string/index.ts","../src/string/toHex.ts","../src/types.ts","../src/u8a/toBase64.ts"],"names":["dvI","hexValue","BN","U8","U16","base58","hex","base64"],"mappings":"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","file":"index.cjs","sourcesContent":["export { range } from './range.js';\nexport { shuffle } from './shuffle.js';\n\n","export function range(size: number, startAt = 0): number[] {\n  if (size <= 0) {\n    throw new Error('Expected non-zero, positive number as a range size');\n  }\n\n  const result = new Array<number>(size);\n\n  for (let i = 0; i < size; i++) {\n    result[i] = i + startAt;\n  }\n\n  return result;\n}\n","export function shuffle<T>(input: readonly T[]): T[] {\n  const result = input.slice();\n  let curr = result.length;\n\n  // noop for the single entry\n  if (curr === 1) {\n    return result;\n  }\n\n  while (curr !== 0) {\n    // ~~ is more performant than Math.floor\n    const rand = ~~(Math.random() * curr);\n\n    curr--;\n\n    [result[curr], result[rand]] = [result[rand], result[curr]];\n  }\n\n  return result;\n}\n","export { nToBigInt } from './toBigInt.js';\nexport { nToHex } from './toHex.js';\nexport { nToU8a } from './toU8a.js';\n\n","\n\nimport type { ToBnOptions as Options } from '../types.js';\n\nconst U8_MAX = BigInt(256);\nconst U16_MAX = BigInt(256 * 256);\nconst U64_MAX = BigInt('0x10000000000000000');\n\n/**\n * @name u8aToBigInt\n * @summary Creates a BigInt from a Uint8Array object.\n */\nexport function u8aToBigInt(value: Uint8Array, { isLe = true, isNegative = false }: Options = {}): bigint {\n  // slice + reverse is expensive, however SCALE is LE by default so this is the path\n  // we are most interested in (the BE is added for the sake of being comprehensive)\n  if (!isLe) {\n    value = value.slice().reverse();\n  }\n\n  const count = value.length;\n\n  if (isNegative && count && (value[count - 1] & 0x80)) {\n    switch (count) {\n      case 0:\n        return BigInt(0);\n\n      case 1:\n        return BigInt(((value[0] ^ 0x0000_00ff) * -1) - 1);\n\n      case 2:\n        return BigInt((((value[0] + (value[1] << 8)) ^ 0x0000_ffff) * -1) - 1);\n\n      case 4:\n        return BigInt((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) * -1) - 1);\n    }\n\n    const dvI = new DataView(value.buffer, value.byteOffset);\n\n    if (count === 8) {\n      return dvI.getBigInt64(0, true);\n    }\n\n    let result = BigInt(0);\n    const mod = count % 2;\n\n    for (let i = count - 2; i >= mod; i -= 2) {\n      result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true) ^ 0xffff);\n    }\n\n    if (mod) {\n      result = (result * U8_MAX) + BigInt(value[0] ^ 0xff);\n    }\n\n    return (result * -1n) - 1n;\n  }\n\n  switch (count) {\n    case 0:\n      return BigInt(0);\n\n    case 1:\n      return BigInt(value[0]);\n\n    case 2:\n      return BigInt(value[0] + (value[1] << 8));\n\n    case 4:\n      return BigInt(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00));\n  }\n\n  const dvI = new DataView(value.buffer, value.byteOffset);\n\n  switch (count) {\n    case 8:\n      return dvI.getBigUint64(0, true);\n\n    case 16:\n      return (dvI.getBigUint64(8, true) * U64_MAX) + dvI.getBigUint64(0, true);\n\n    default: {\n      let result = BigInt(0);\n      const mod = count % 2;\n\n      for (let i = count - 2; i >= mod; i -= 2) {\n        result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true));\n      }\n\n      if (mod) {\n        result = (result * U8_MAX) + BigInt(value[0]);\n      }\n\n      return result;\n    }\n  }\n}\n","export const HEX_PREFIX = '0x';\n\nexport const REGEX_HEX_WITH_PREFIX = /^0x[0-9a-fA-F]*$/;\n\nexport const REGEX_HEX_WITHOUT_PREFIX = /^[0-9a-fA-F]+$/;\n\nexport const REGEX_HEX_WITH_MIXED_PREFIX = /^(0x)?[0-9a-fA-F]+$/;\n\nexport function isHex(value: unknown, bitLength?: number, ignoreLength?: boolean): value is string {\n  if (typeof value !== 'string') return false;\n\n  if (value === '') return false;\n\n  const isValidHex = REGEX_HEX_WITH_PREFIX.test(value);\n  if (!isValidHex) return false;\n\n  // If ignoreLength is true, don't check bitLength\n  if (ignoreLength) return true;\n\n  // If bitLength is provided, check the length\n  if (bitLength !== undefined && bitLength > 0) {\n    const hexValue = value.startsWith('0x') ? value.slice(2) : value;\n    const expectedLength = Math.ceil(bitLength / 4);\n    return hexValue.length === expectedLength;\n  }\n\n  // If no bitLength specified, check if hex string length is even\n  const hexValue = value.startsWith('0x') ? value.slice(2) : value;\n  return hexValue.length % 2 === 0;\n}","\n\nimport { REGEX_HEX_WITHOUT_PREFIX, REGEX_HEX_WITH_PREFIX } from '../is/hex.js';\n\n/**\n * @name hexStripPrefix\n * @summary Strips any leading `0x` prefix.\n * @description\n * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexStripPrefix } from '@sola-hq/util';\n *\n * console.log('stripped', hexStripPrefix('0x1234')); // => 1234\n * ```\n */\nexport function hexStripPrefix(value?: string | null): string {\n  if (!value || value === '0x') {\n    return '';\n  } else if (REGEX_HEX_WITH_PREFIX.test(value)) {\n    return value.substring(2);\n  } else if (REGEX_HEX_WITHOUT_PREFIX.test(value)) {\n    return value;\n  }\n\n  throw new Error(`Expected hex value to convert, found '${value}'`);\n}\n","\n\nimport { hexStripPrefix } from './stripPrefix.js';\n\nconst CHR = '0123456789abcdef';\nconst U8 = new Uint8Array(256);\nconst U16 = new Uint8Array(256 * 256);\n\nfor (let i = 0, count = CHR.length; i < count; i++) {\n  U8[CHR[i].charCodeAt(0) | 0] = i | 0;\n\n  if (i > 9) {\n    U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;\n  }\n}\n\nfor (let i = 0; i < 256; i++) {\n  const s = i << 8;\n\n  for (let j = 0; j < 256; j++) {\n    U16[s | j] = (U8[i] << 4) | U8[j];\n  }\n}\n\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@sola-hq/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\nexport function hexToU8a(value?: string | null, bitLength = -1): Uint8Array {\n  if (!value) {\n    return new Uint8Array();\n  }\n\n  const stripped = hexStripPrefix(value);\n\n  const decLength = Math.ceil(stripped.length / 2);\n  const endLength = Math.ceil(\n    bitLength === -1\n      ? decLength\n      : bitLength / 8\n  );\n  const result = new Uint8Array(endLength);\n  const offset = endLength > decLength\n    ? endLength - decLength\n    : 0;\n\n  for (let i = offset, s = 0; i < endLength; i++, s += 2) {\n    // The big factor here is actually the string lookups. If we do\n    // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the\n    // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is\n    // also the faster operation by at least 2x with the character map above\n    result[i] = U16[(stripped.charCodeAt(s) << 8) | stripped.charCodeAt(s + 1)];\n  }\n\n  return result;\n}\n","\n\nimport type { ToBnOptions } from '../types.js';\n\nimport { u8aToBigInt } from '../u8a/toBigInt.js';\nimport { hexToU8a } from './toU8a.js';\n\n/**\n * @name hexToBigInt\n * @summary Creates a BigInt instance object from a hex string.\n */\nexport function hexToBigInt(value?: string | null, { isLe = false, isNegative = false }: ToBnOptions = {}): bigint {\n  return !value || value === '0x'\n    ? BigInt(0)\n    : u8aToBigInt(hexToU8a(value), { isLe, isNegative });\n}\n","\n\nimport { BN } from '../bn/bn.js';\n\n/**\n * @name isBn\n * @summary Tests for a `BN` object instance.\n * @description\n * Checks to see if the input object is an instance of `BN` (bn.js).\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { isBn } from '@sola-hq/util';\n *\n * console.log('isBn', isBn(new BN(1))); // => true\n * ```\n */\nexport function isBn(value: unknown): value is BN {\n  return BN.isBN(value);\n}\n","\n\nimport type { ToBigInt } from '../types.js';\n\n/**\n * @description Checks if the value is an object with a toBigInt method\n * @param value - The value to check\n * @returns True if the value is an object with a toBigInt method, false otherwise\n */\nexport const isToBigInt = (value: unknown): value is ToBigInt => {\n\treturn typeof value === 'object' && value !== null && 'toBigInt' in value;\n};\n","\n\nimport type { ToBn } from '../types.js';\n\nexport const isToBn = (value: unknown): value is ToBn => {\n\treturn typeof value === 'object' && value !== null && 'toBn' in value;\n};\n","\nimport type { BN } from '../bn/bn.js';\nimport type { ToBigInt, ToBn } from '../types.js';\n\nimport { hexToBigInt } from '../hex/toBigInt.js';\nimport { isBn } from '../is/bn.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\n\n/**\n * @name nToBigInt\n * @summary Creates a bigInt value from a BN, bigint, string (base 10 or hex) or number input.\n */\nexport function nToBigInt<T extends ToBigInt | ToBn>(value?: T | BN | bigint | string | number | null): bigint {\n  // Early return for null/undefined/empty values\n  if (!value) {\n    return BigInt(0);\n  }\n\n  // Early return for bigint type\n  if (typeof value === 'bigint') {\n    return value;\n  }\n\n  // Handle hex strings\n  if (isHex(value)) {\n    return hexToBigInt(value);\n  }\n\n  // Handle BN objects\n  if (isBn(value)) {\n    return BigInt(value.toString());\n  }\n\n  // Handle objects with toBigInt method\n  if (isToBigInt(value)) {\n    return value.toBigInt();\n  }\n\n  // Handle objects with toBn method\n  if (isToBn(value)) {\n    return BigInt(value.toBn().toString());\n  }\n\n  // Default case: try to convert to BigInt\n  return BigInt(value);\n}\n","\n\n/**\n * @summary Utility methods to convert to and from `Uint8Array` objects\n */\n\n\nexport { u8aEmpty } from './empty.js';\nexport { u8aEq } from './eq.js';\nexport { u8aFixLength } from './fixLength.js';\nexport { u8aToBigInt } from './toBigInt.js';\nexport { u8aToBn } from './toBn.js';\n\nexport { u8aToFloat } from './toFloat.js';\nexport { u8aToHex } from './toHex.js';\nexport { u8aToNumber } from './toNumber.js';\nexport { u8aToString } from './toString.js';\nexport { u8aToU8a } from './toU8a.js';\nexport { u8aConcatStrict } from './concat.js';\nexport { u8aToBase58 } from './toBase58.js';\n","\n\n/**\n * @name u8aEmpty\n * @summary Tests for a `Uint8Array` for emptyness\n * @description\n * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.\n */\nexport function u8aEmpty(value: Uint8Array): boolean {\n  const len = value.length | 0;\n\n  // on smaller sizes, the byte-by-byte compare is faster than allocating\n  // another object for DataView (on very large arrays the DataView is faster)\n  for (let i = 0; i < len; i++) {\n    if (value[i] | 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/** true if the environment has proper BigInt support */\nexport const hasBigInt = typeof BigInt === 'function' && typeof BigInt.asIntN === 'function';\n\n/** true if the environment has support for Buffer (typically Node.js) */\nexport const hasBuffer = typeof Buffer !== 'undefined' && typeof Buffer.isBuffer === 'function';\n\n","import { hasBuffer } from '../has.js';\nimport { isFunction } from './function.js';\n\nexport function isBuffer(value: unknown): value is Buffer {\n  return hasBuffer && !!value && typeof value === 'object' && Buffer.isBuffer(value);\n}\n","\n\n/**\n * @name isU8a\n * @summary Tests for a `Uint8Array` object instance.\n * @description\n * Checks to see if the input object is an instance of `Uint8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isUint8Array } from '@sola-hq/util';\n *\n * console.log('isU8a', isU8a([])); // => false\n * ```\n */\nexport function isU8a(value?: unknown): value is Uint8Array {\n  // here we defer the instanceof check which is actually slightly\n  // slower than just checking the constrctor (direct instances)\n  return (\n    ((value && (value as Uint8Array).constructor) === Uint8Array) ||\n    value instanceof Uint8Array\n  );\n}\n","const encoder = new TextEncoder();\n\n/**\n * @name stringToU8a\n * @summary Creates a Uint8Array object from a utf-8 string.\n * @description\n * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringToU8a } from '@sola-hq/util';\n *\n * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]\n * ```\n */\nexport function stringToU8a(value?: string | null): Uint8Array {\n  return value\n    ? encoder.encode(value.toString())\n    : new Uint8Array();\n}\n","import type { U8aLike } from '../types.js';\n\nimport { hexToU8a } from '../hex/toU8a.js';\nimport { isBuffer } from '../is/buffer.js';\nimport { isHex } from '../is/hex.js';\nimport { isU8a } from '../is/u8a.js';\nimport { stringToU8a } from '../string/toU8a.js';\n\n/**\n * @name u8aToU8a\n * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.\n * @description\n * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.\n * If `strict` is true, `null` or `undefined` will throw an error instead of returning an empty array.\n * Supports input types: Uint8Array, Buffer, hex string, string, or number array.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToU8a } from '@sola-hq/util';\n *\n * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])\n * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])\n * ```\n */\nexport function u8aToU8a(value?: U8aLike | null, strict = false): Uint8Array {\n  if (strict && (value === null || value === undefined)) {\n    throw new Error('u8aToU8a: Expected non-null, non-undefined value');\n  }\n\n  return isU8a(value)\n    // NOTE isBuffer needs to go here since it actually extends\n    // Uint8Array on Node.js environments, so all Buffer are Uint8Array,\n    // but Uint8Array is not Buffer\n    ? isBuffer(value)\n      ? new Uint8Array(value)\n      : value\n    : isHex(value)\n      ? hexToU8a(value as unknown as string)\n      : Array.isArray(value)\n        ? new Uint8Array(value)\n        : stringToU8a(value);\n}\n","\n\nimport { u8aToU8a } from './toU8a.js';\n\n/**\n * @name u8aEq\n * @summary Compares two Uint8Arrays for equality.\n * @description\n * For `UInt8Array` (or hex string) input values true if there is a match.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aEq } from '@sola-hq/util';\n *\n * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true\n * ```\n */\nexport function u8aEq(a: string | Uint8Array, b: string | Uint8Array): boolean {\n  const u8aa = u8aToU8a(a);\n  const u8ab = u8aToU8a(b);\n\n  if (u8aa.length === u8ab.length) {\n    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);\n    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);\n    const mod = (u8aa.length % 4) | 0;\n    const length = (u8aa.length - mod) | 0;\n\n    for (let i = 0; i < length; i += 4) {\n      if (dvA.getUint32(i) !== dvB.getUint32(i)) {\n        return false;\n      }\n    }\n\n    for (let i = length, count = u8aa.length; i < count; i++) {\n      if (u8aa[i] !== u8ab[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n","\n\n/**\n * @name u8aFixLength\n * @summary Shifts a Uint8Array to a specific bitLength\n * @description\n * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aFixLength } from '@sola-hq/util';\n *\n * u8aFixLength('0x12') // => 0x12\n * u8aFixLength('0x12', 16) // => 0x0012\n * u8aFixLength('0x1234', 8) // => 0x12\n * ```\n */\nexport function u8aFixLength(value: Uint8Array, bitLength = -1, atStart = false): Uint8Array {\n  const byteLength = Math.ceil(bitLength / 8);\n\n  if (bitLength === -1 || value.length === byteLength) {\n    return value;\n  } else if (value.length > byteLength) {\n    return value.subarray(0, byteLength);\n  }\n\n  const result = new Uint8Array(byteLength);\n\n  result.set(value, atStart ? 0 : (byteLength - value.length));\n\n  return result;\n}\n","\n\nimport type { ToBnOptions } from '../types.js';\n\nimport { BN } from '../bn/bn.js';\n\n/**\n * @name u8aToBn\n * @summary Creates a BN from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.\n * @param value The value to convert\n * @param options Options to pass while converting\n * @param options.isLe Convert using Little Endian (default)\n * @param options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToBn } from '@sola-hq/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\nexport function u8aToBn(value: Uint8Array, { isLe = true, isNegative = false }: ToBnOptions = {}): BN {\n  // slice + reverse is expensive, however SCALE is LE by default so this is the path\n  // we are most interested in (the BE is added for the sake of being comprehensive)\n  if (!isLe) {\n    value = value.slice().reverse();\n  }\n\n  const count = value.length;\n\n  // shortcut for <= u48 values - in this case the manual conversion\n  // here seems to be more efficient than passing the full array\n  if (isNegative && count && (value[count - 1] & 0x80)) {\n    // Most common case i{8, 16, 32} default LE SCALE-encoded\n    // For <= 32, we also optimize the xor to a single op\n    switch (count) {\n      case 0:\n        return new BN(0);\n\n      case 1:\n        return new BN(((value[0] ^ 0x0000_00ff) * -1) - 1);\n\n      case 2:\n        return new BN((((value[0] + (value[1] << 8)) ^ 0x0000_ffff) * -1) - 1);\n\n      case 3:\n        return new BN((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 0x00ff_ffff) * -1) - 1);\n\n      case 4:\n        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n        // 32-bit, in the case where the top-most bit is set this yields a negative value\n        return new BN((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) * -1) - 1);\n\n      case 5:\n        return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + ((value[4] ^ 0xff) * 0x1_00_00_00_00)) * -1) - 1);\n\n      case 6:\n        return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + (((value[4] + (value[5] << 8)) ^ 0x0000_ffff) * 0x1_00_00_00_00)) * -1) - 1);\n\n      default:\n        return new BN(value, 'le').fromTwos(count * 8);\n    }\n  }\n\n  // Most common case - u{8, 16, 32} default LE SCALE-encoded\n  //\n  // There are some slight benefits in unrolling this specific loop,\n  // however it comes with diminishing returns since here the actual\n  // `new BN` does seem to take up the bulk of the time\n  switch (count) {\n    case 0:\n      return new BN(0);\n\n    case 1:\n      return new BN(value[0]);\n\n    case 2:\n      return new BN(value[0] + (value[1] << 8));\n\n    case 3:\n      return new BN(value[0] + (value[1] << 8) + (value[2] << 16));\n\n    case 4:\n      // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n      // 32-bit, in the case where the top-most bit is set this yields a negative value\n      return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00));\n\n    case 5:\n      return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 0x1_00_00_00));\n\n    case 6:\n      return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 0x1_00_00_00));\n\n    default:\n      return new BN(value, 'le');\n  }\n}\n","\n\ninterface Options {\n  bitLength?: 32 | 64;\n  isLe?: boolean;\n}\n\n/**\n * @name u8aToFloat\n * @description Converts a Uint8Array value into the float (either 32 or 64-bit)\n * representation.\n */\nexport function u8aToFloat(value: Uint8Array, { bitLength = 32, isLe = true }: Options = {}): number {\n  if (bitLength !== 32 && bitLength !== 64) {\n    throw new Error('Invalid bitLength provided, expected 32 or 64');\n  } else if (value.length < (bitLength / 8)) {\n    throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);\n  }\n\n  const dv = new DataView(value.buffer, value.byteOffset);\n\n  return bitLength === 32\n    ? dv.getFloat32(0, isLe)\n    : dv.getFloat64(0, isLe);\n}\n","\nconst U8 = new Array<string>(256);\nconst U16 = new Array<string>(256 * 256);\n\nfor (let n = 0; n < 256; n++) {\n  U8[n] = n.toString(16).padStart(2, '0');\n}\n\nfor (let i = 0; i < 256; i++) {\n  const s = i << 8;\n\n  for (let j = 0; j < 256; j++) {\n    U16[s | j] = U8[i] + U8[j];\n  }\n}\n\n/** @internal */\nfunction hex(value: Uint8Array, result: string): string {\n  const mod = (value.length % 2) | 0;\n  const length = (value.length - mod) | 0;\n\n  for (let i = 0; i < length; i += 2) {\n    result += U16[(value[i] << 8) | value[i + 1]];\n  }\n\n  if (mod) {\n    result += U8[value[length] | 0];\n  }\n\n  return result;\n}\n\n/**\n * @name u8aToHex\n * @summary Creates a hex string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToHex } from '@sola-hq/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\nexport function u8aToHex(value?: Uint8Array | null, bitLength = -1, isPrefixed = true): string {\n  // this is not 100% correct since we support isPrefixed = false....\n  const empty = isPrefixed\n    ? '0x'\n    : '' as string;\n\n  if (!value?.length) {\n    return empty;\n  } else if (bitLength > 0) {\n    const length = Math.ceil(bitLength / 8);\n\n    if (value.length > length) {\n      return `${hex(value.subarray(0, length / 2), empty)}…${hex(value.subarray(value.length - length / 2), '' as string)}`;\n    }\n  }\n\n  return hex(value, empty);\n}\n","\n\nimport type { ToBnOptions } from '../types.js';\n\n/**\n * @name u8aToNumber\n * @summary Creates a number from a Uint8Array object.\n */\nexport function u8aToNumber(value: Uint8Array, { isLe = true, isNegative = false }: ToBnOptions = {}): number {\n  // slice + reverse is expensive, however SCALE is LE by default so this is the path\n  // we are most interested in (the BE is added for the sake of being comprehensive)\n  if (!isLe) {\n    value = value.slice().reverse();\n  }\n\n  const count = value.length;\n\n  // When the value is a i{8, 16, 24, 32, 40, 40} values and the top-most bit\n  // indicates a signed value, we use a two's complement conversion. If one of these\n  // flags are not set, we just do a normal unsigned conversion (the same shortcut\n  // applies in both the u8aTo{BigInt, Bn} conversions as well)\n  if (isNegative && count && (value[count - 1] & 0x80)) {\n    switch (count) {\n      case 0:\n        return 0;\n\n      case 1:\n        return (((value[0] ^ 0x0000_00ff) * -1) - 1);\n\n      case 2:\n        return ((((value[0] + (value[1] << 8)) ^ 0x0000_ffff) * -1) - 1);\n\n      case 3:\n        return ((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 0x00ff_ffff) * -1) - 1);\n\n      case 4:\n        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n        // 32-bit, in the case where the top-most bit is set this yields a negative value\n        return ((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) * -1) - 1);\n\n      case 5:\n        return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + ((value[4] ^ 0xff) * 0x1_00_00_00_00)) * -1) - 1);\n\n      case 6:\n        return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00)) ^ 0xffff_ffff) + (((value[4] + (value[5] << 8)) ^ 0x0000_ffff) * 0x1_00_00_00_00)) * -1) - 1);\n\n      default:\n        throw new Error('Value more than 48-bits cannot be reliably converted');\n    }\n  }\n\n  switch (count) {\n    case 0:\n      return 0;\n\n    case 1:\n      return value[0];\n\n    case 2:\n      return value[0] + (value[1] << 8);\n\n    case 3:\n      return value[0] + (value[1] << 8) + (value[2] << 16);\n\n    case 4:\n      // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n      // 32-bit, in the case where the top-most bit is set this yields a negative value\n      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 0x1_00_00_00);\n\n    case 5:\n      return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 0x1_00_00_00);\n\n    case 6:\n      return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 0x1_00_00_00);\n\n    default:\n      throw new Error('Value more than 48-bits cannot be reliably converted');\n  }\n}\n","\n\nconst decoder = new TextDecoder();\n\n/**\n * @name u8aToString\n * @summary Creates a utf-8 string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToString } from '@sola-hq/util';\n *\n * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello\n * ```\n */\nexport function u8aToString(value?: Uint8Array | null): string {\n  return value\n    ? decoder.decode(value)\n    : '';\n}\n","\n\nimport type { U8aLike } from '../types.js';\n\nimport { u8aToU8a } from './toU8a.js';\n\n/**\n * @name u8aConcat\n * @summary Creates a concatenated Uint8Array from the inputs.\n * @description\n * Concatenates the input arrays into a single `UInt8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { { u8aConcat } from '@sola-hq/util';\n *\n * u8aConcat(\n *   new Uint8Array([1, 2, 3]),\n *   new Uint8Array([4, 5, 6])\n * ); // [1, 2, 3, 4, 5, 6]\n * ```\n */\nexport function u8aConcat(...list: readonly U8aLike[]): Uint8Array {\n  const count = list.length;\n  const u8as = new Array<Uint8Array>(count);\n  let length = 0;\n\n  for (let i = 0; i < count; i++) {\n    u8as[i] = u8aToU8a(list[i]);\n    length += u8as[i].length;\n  }\n\n  return u8aConcatStrict(u8as, length);\n}\n\n/**\n * @name u8aConcatStrict\n * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs\n */\nexport function u8aConcatStrict(u8as: readonly Uint8Array[], length = 0): Uint8Array {\n  const count = u8as.length;\n  let offset = 0;\n\n  if (!length) {\n    for (let i = 0; i < count; i++) {\n      length += u8as[i].length;\n    }\n  }\n\n  const result = new Uint8Array(length);\n\n  for (let i = 0; i < count; i++) {\n    result.set(u8as[i], offset);\n    offset += u8as[i].length;\n  }\n\n  return result;\n}\n","import { base58 } from '@scure/base';\n\nimport { u8aToU8a } from '../u8a/toU8a.js';\nimport { U8aLike } from '../types.js';\n\n\nexport function toBase58(value: U8aLike): string {\n  return base58.encode(u8aToU8a(value));\n}\n","import { toBase58 } from '../base58/toBase58.js';\n\nexport function u8aToBase58(value: Uint8Array): string {\n  return toBase58(value);\n}\n","import type { BN } from '../bn/bn.js';\nimport type { ToNumberOptions, ToBigInt, ToBn } from '../types.js';\n\nimport { nToBigInt } from './toBigInt.js';\n\nconst DIV = BigInt(256);\nconst NEG_MASK = BigInt(0xff);\n\nfunction toU8a(value: bigint, isLe: boolean): Uint8Array {\n  const arr: number[] = [];\n\n  while (value !== BigInt(0)) {\n    const mod = value % DIV;\n    const val = Number(\n      mod\n    );\n\n    if (isLe) {\n      arr.push(val);\n    } else {\n      arr.unshift(val);\n    }\n\n    value = (value - mod) / DIV;\n  }\n\n  return Uint8Array.from(arr);\n}\n\n/**\n * @name nToU8a\n * @summary Creates a Uint8Array object from a bigint.\n */\nexport function nToU8a<T extends ToBn | ToBigInt>(value?: T | BN | bigint | number | null, { bitLength = -1, isLe = true, isNegative = false }: ToNumberOptions = {}): Uint8Array {\n  let valueBi = nToBigInt(value);\n\n  if (valueBi === BigInt(0)) {\n    return bitLength === -1\n      ? new Uint8Array(1)\n      : new Uint8Array(Math.ceil((bitLength || 0) / 8));\n  }\n\n  // Handle negative numbers for two's complement\n  if (isNegative && valueBi < BigInt(0)) {\n    // Determine the effective bit length if not provided\n    const effectiveBitLength = bitLength === -1\n      ? Math.ceil(valueBi.toString(2).length / 8) * 8 // Smallest multiple of 8\n      : bitLength;\n\n    const twoPowN = BigInt(1) << BigInt(effectiveBitLength);\n    valueBi = twoPowN + valueBi;\n  }\n\n  const u8a = toU8a(valueBi, isLe);\n\n  if (bitLength === -1) {\n    return u8a;\n  }\n\n  const byteLength = Math.ceil((bitLength || 0) / 8);\n  const output = new Uint8Array(byteLength);\n\n  // Truncate u8a if it's larger than byteLength\n  const truncatedU8a = u8a.length > byteLength\n    ? (isLe ? u8a.slice(0, byteLength) : u8a.slice(u8a.length - byteLength))\n    : u8a;\n\n  output.set(truncatedU8a, isLe ? 0 : byteLength - truncatedU8a.length);\n\n  return output;\n}\n","import type { BN } from '../bn/bn.js';\nimport type { ToNumberOptions, ToBigInt, ToBn } from '../types.js';\n\nimport { u8aToHex } from '../u8a/index.js';\nimport { nToU8a } from './toU8a.js';\n\n/**\n * @name nToHex\n * @summary Creates a hex value from a bigint object.\n */\nexport function nToHex<T extends ToBn | ToBigInt>(value?: T | BN | bigint | number | null, { bitLength = -1, isLe = false, isNegative = false }: ToNumberOptions = {}): string {\n  return u8aToHex(nToU8a(value || 0, { bitLength, isLe, isNegative }));\n}\n","\n\n/**\n * @summary Utility methods to convert to and from `BN` objects\n */\n\nexport { BN } from './bn.js';\nexport { bnToBn } from './toBn.js';\nexport { bnToHex } from './toHex.js';\nexport { bnToU8a } from './toU8a.js';\n\n// all starred\nexport * from './consts.js';\n","\n\nimport type { ToBnOptions } from '../types.js';\n\nimport { BN } from '../bn/bn.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n\n/**\n * @name hexToBn\n * @summary Creates a BN.js object from a hex string.\n * @description\n * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @param _value The value to convert\n * @param _options Options to pass while converting\n * @param _options.isLe Convert using Little Endian\n * @param _options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToBn } from '@sola-hq/util';\n *\n * hexToBn('0x123480001f'); // => BN(0x123480001f)\n * ```\n */\nexport function hexToBn(value?: string | null, { isLe = false, isNegative = false }: ToBnOptions = {}): BN {\n  if (!value || value === '0x') {\n    return new BN(0);\n  }\n\n  const stripped = hexStripPrefix(value);\n  const bn = new BN(stripped, 16, isLe ? 'le' : 'be');\n\n  // fromTwos takes as parameter the number of bits, which is the hex length\n  // multiplied by 4 (2 bytes being 8 bits)\n  return isNegative\n    ? bn.fromTwos(stripped.length * 4)\n    : bn;\n}\n","export function isBigInt(value: unknown): value is bigint {\n  return typeof value === 'bigint';\n}\n","\n\nimport type { ToBigInt, ToBn } from '../types.js';\n\nimport { hexToBn } from '../hex/toBn.js';\nimport { isBigInt } from '../is/bigint.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\nimport { BN } from './bn.js';\n\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@sola-hq/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\nexport function bnToBn<T extends ToBigInt | ToBn>(value?: T | BN | bigint | string | number | null): BN {\n  return value\n    ? BN.isBN(value)\n      ? value\n      : isHex(value)\n        ? hexToBn(value.toString())\n        : isBigInt(value)\n          ? new BN(value.toString())\n          : isToBn(value)\n            ? value.toBn()\n            : isToBigInt(value)\n              ? new BN(value.toBigInt().toString())\n              : new BN(value)\n    : new BN(0);\n}\n","\n\nimport type { ToNumberOptions, ToBn } from '../types.js';\nimport type { BN } from './bn.js';\n\nimport { nToU8a } from '../bigint/toU8a.js';\nimport { bnToBn } from './toBn.js';\n\nconst DEFAULT_OPTS: ToNumberOptions = { bitLength: -1, isLe: true, isNegative: false };\n\n/**\n * @name bnToU8a\n * @summary Creates a Uint8Array object from a BN.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.\n * @example\n * <BR>\n *\n * ```javascript\n * import { bnToU8a } from '@sola-hq/util';\n *\n * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]\n * ```\n */\nexport function bnToU8a<ExtToBn extends ToBn>(value?: ExtToBn | BN | bigint | number | null, options: ToNumberOptions = DEFAULT_OPTS): Uint8Array {\n  return nToU8a(bnToBn(value), options);\n}\n","import type { ToNumberOptions, ToBn } from '../types.js';\nimport type { BN } from './bn.js';\n\nimport { u8aToHex } from '../u8a/index.js';\nimport { bnToU8a } from './toU8a.js';\n\nexport function bnToHex<T extends ToBn>(value?: T | BN | bigint | number | null, { bitLength = -1, isLe = false, isNegative = false }: ToNumberOptions = {}): string {\n  return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));\n}\n","import { BN } from './bn.js';\n\n/**\n * @name BN_ZERO\n * @summary BN constant for 0.\n */\nexport const BN_ZERO: BN = /*#__PURE__*/ new BN(0);\n\n/**\n * @name BN_ONE\n * @summary BN constant for 1.\n */\nexport const BN_ONE: BN = /*#__PURE__*/ new BN(1);\n\n/**\n * @name BN_TWO\n * @summary BN constant for 2.\n */\nexport const BN_TWO: BN = /*#__PURE__*/ new BN(2);\n\n/**\n * @name BN_THREE\n * @summary BN constant for 3.\n */\nexport const BN_THREE: BN = /*#__PURE__*/ new BN(3);\n\n/**\n * @name BN_FOUR\n * @summary BN constant for 4.\n */\nexport const BN_FOUR: BN = /*#__PURE__*/ new BN(4);\n\n/**\n * @name BN_FIVE\n * @summary BN constant for 5.\n */\nexport const BN_FIVE: BN = /*#__PURE__*/ new BN(5);\n\n/**\n * @name BN_SIX\n * @summary BN constant for 6.\n */\nexport const BN_SIX: BN = /*#__PURE__*/ new BN(6);\n\n/**\n * @name BN_SEVEN\n * @summary BN constant for 7.\n */\nexport const BN_SEVEN: BN = /*#__PURE__*/ new BN(7);\n\n/**\n * @name BN_EIGHT\n * @summary BN constant for 8.\n */\nexport const BN_EIGHT: BN = /*#__PURE__*/ new BN(8);\n\n/**\n * @name BN_NINE\n * @summary BN constant for 9.\n */\nexport const BN_NINE: BN = /*#__PURE__*/ new BN(9);\n\n/**\n * @name BN_TEN\n * @summary BN constant for 10.\n */\nexport const BN_TEN: BN = /*#__PURE__*/ new BN(10);\n\n/**\n * @name BN_HUNDRED\n * @summary BN constant for 100.\n */\nexport const BN_HUNDRED: BN = /*#__PURE__*/ new BN(100);\n\n/**\n * @name BN_THOUSAND\n * @summary BN constant for 1,000.\n */\nexport const BN_THOUSAND: BN = /*#__PURE__*/ new BN(1_000);\n\n/**\n * @name BN_MILLION\n * @summary BN constant for 1,000,000.\n */\nexport const BN_MILLION: BN = /*#__PURE__*/ new BN(1_000_000);\n\n/**\n * @name BN_BILLION\n * @summary BN constant for 1,000,000,000.\n */\nexport const BN_BILLION: BN = /*#__PURE__*/ new BN(1_000_000_000);\n\n/**\n * @name BN_QUINTILL\n * @summary BN constant for 1,000,000,000,000,000,000.\n */\nexport const BN_QUINTILL: BN = BN_BILLION.mul(BN_BILLION);\n\n/**\n * @name BN_MAX_INTEGER\n * @summary BN constant for MAX_SAFE_INTEGER\n */\nexport const BN_MAX_INTEGER: BN = /*#__PURE__*/ new BN(Number.MAX_SAFE_INTEGER);\n\n/**\n * @name BN_SQRT_MAX_INTEGER\n * @summary BN constant for Math.sqrt(MAX_SAFE_INTEGER)\n */\nexport const BN_SQRT_MAX_INTEGER: BN = /*#__PURE__*/ new BN(94906265);\n","\n\n/**\n * @summary Utility methods to convert to and from `Buffer` objects\n */\n\nexport { bufferToU8a } from './toU8a.js';\n","export function bufferToU8a(buffer?: Uint8Array | number[] | null): Uint8Array {\n  return new Uint8Array(buffer ?? []);\n}\n","\n\n/**\n * @description\n * Encoding and decoding of parity-codec compact numbers. The codec is created\n * to take up the least amount of space for a specific number. It performs the\n * same function as Length, however differs in that it uses a variable number of\n * bytes to do the actual encoding. From the Rust implementation for compact\n * encoding:\n *\n *     0b00 00 00 00 / 00 00 00 00 / 00 00 00 00 / 00 00 00 00\n * (0 ... 2**6 - 1)    (u8)\n *     xx xx xx 00\n * (2**6 ... 2**14 - 1)  (u8, u16)  low LH high\n *     yL yL yL 01 / yH yH yH yL\n * (2**14 ... 2**30 - 1)  (u16, u32)  low LMMH high\n *     zL zL zL 10 / zM zM zM zL / zM zM zM zM / zH zH zH zM\n * (2**30 ... 2**536 - 1)  (u32, u64, u128, U256, U512, U520) straight LE-encoded\n *     nn nn nn 11 [ / zz zz zz zz ]{4 + n}\n *\n * Note: we use *LOW BITS* of the LSB in LE encoding to encode the 2 bit key.\n */\n\nexport { compactAddLength } from './addLength.js';\nexport { compactFromU8a, compactFromU8aLim } from './fromU8a.js';\nexport { compactStripLength } from './stripLength.js';\nexport { compactToU8a } from './toU8a.js';\n","\n\nimport { BN, BN_ONE, BN_TWO, bnToBn, bnToU8a } from '../bn/index.js';\nimport { u8aConcatStrict } from '../u8a/concat.js';\n\nconst MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);\nconst MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);\nconst MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);\nconst BL_16 = { bitLength: 16 };\nconst BL_32 = { bitLength: 32 };\n\n/**\n * @name compactToU8a\n * @description Encodes a number into a compact representation\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactToU8a } from '@sola-hq/util';\n *\n * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])\n * ```\n */\nexport function compactToU8a(value: BN | bigint | number): Uint8Array {\n  const bn = bnToBn(value);\n\n  if (bn.lte(MAX_U8)) {\n    return new Uint8Array([bn.toNumber() << 2]);\n  } else if (bn.lte(MAX_U16)) {\n    return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);\n  } else if (bn.lte(MAX_U32)) {\n    return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);\n  }\n\n  const u8a = bnToU8a(bn);\n  let length = u8a.length;\n\n  // adjust to the minimum number of bytes\n  while (u8a[length - 1] === 0) {\n    length--;\n  }\n\n  if (length < 4) {\n    throw new Error('Invalid length, previous checks match anything less than 2^30');\n  }\n\n  return u8aConcatStrict([\n    // subtract 4 as minimum (also catered for in decoding)\n    new Uint8Array([((length - 4) << 2) + 0b11]),\n    u8a.subarray(0, length)\n  ]);\n}\n","import { u8aConcatStrict } from '../u8a/concat.js';\nimport { compactToU8a } from './toU8a.js';\n\nexport function compactAddLength(input: Uint8Array): Uint8Array {\n  return u8aConcatStrict([\n    compactToU8a(input.length),\n    input\n  ]);\n}\n","\n\nimport type { U8aLike } from '../types.js';\n\nimport { BN } from '../bn/index.js';\nimport { u8aToBn, u8aToU8a } from '../u8a/index.js';\n\n/**\n * @name compactFromU8a\n * @description Retrives the offset and encoded length from a compact-prefixed value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactFromU8a } from '@sola-hq/util';\n *\n * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));\n *\n * console.log('value offset=', offset, 'length=', length); // 4, 0xffff\n * ```\n */\nexport function compactFromU8a(input: U8aLike): [number, BN] {\n  const u8a = u8aToU8a(input);\n\n  // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster\n  // than doing an additional call to u8aToBn (as with variable length)\n  switch (u8a[0] & 0b11) {\n    case 0b00:\n      return [1, new BN(u8a[0] >>> 2)];\n\n    case 0b01:\n      return [2, new BN((u8a[0] + (u8a[1] << 8)) >>> 2)];\n\n    case 0b10:\n      // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n      // 32-bit, in the case where the top-most bit is set this yields a negative value\n      return [4, new BN((u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 0x1_00_00_00)) >>> 2)];\n\n    // 0b11\n    default: {\n      // add 5 to shifted (4 for base length, 1 for this byte)\n      const offset = (u8a[0] >>> 2) + 5;\n\n      // we unroll the loop\n      switch (offset) {\n        // there still could be 4 bytes data, similar to 0b10 above (with offsets)\n        case 5:\n          // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n          // 32-bit, in the case where the top-most bit is set this yields a negative value\n          return [5, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 0x1_00_00_00))];\n\n        case 6:\n          return [6, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 0x1_00_00_00))];\n\n        // 6 bytes data is the maximum, 48 bits (56 would overflow)\n        case 7:\n          return [7, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 0x1_00_00_00))];\n\n        // for anything else, use the non-unrolled version\n        default:\n          return [offset, u8aToBn(u8a.subarray(1, offset))];\n      }\n    }\n  }\n}\n\n/**\n * @name compactFromU8aLim\n * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits\n */\nexport function compactFromU8aLim(u8a: Uint8Array): [number, number] {\n  // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster\n  // than doing an additional call to u8aToBn (as with variable length)\n  switch (u8a[0] & 0b11) {\n    case 0b00:\n      return [1, u8a[0] >>> 2];\n\n    case 0b01:\n      return [2, (u8a[0] + (u8a[1] << 8)) >>> 2];\n\n    case 0b10:\n      // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n      // 32-bit, in the case where the top-most bit is set this yields a negative value\n      return [4, (u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 0x1_00_00_00)) >>> 2];\n\n    // 0b11\n    default: {\n      // add 5 to shifted (4 for base length, 1 for this byte)\n      // we unroll the loop\n      switch ((u8a[0] >>> 2) + 5) {\n        // there still could be 4 bytes data, similar to 0b10 above (with offsets)\n        case 5:\n          return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 0x1_00_00_00)];\n\n        case 6:\n          return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 0x1_00_00_00)];\n\n        // 6 bytes data is the maximum, 48 bits (56 would overflow)\n        case 7:\n          return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 0x1_00_00_00)];\n\n        // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out\n        default:\n          throw new Error('Compact input is > Number.MAX_SAFE_INTEGER');\n      }\n    }\n  }\n}\n","\n\nimport { compactFromU8a } from './fromU8a.js';\n\n/**\n * @name compactStripLength\n * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactStripLength } from '@sola-hq/util';\n *\n * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]\n * ```\n */\nexport function compactStripLength(input: Uint8Array): [number, Uint8Array] {\n  const [offset, length] = compactFromU8a(input);\n  const total = offset + length.toNumber();\n\n  return [\n    total,\n    input.subarray(offset, total)\n  ];\n}\n","\nexport { floatToU8a } from './toU8a.js';\n","interface Options {\n  bitLength?: 32 | 64;\n  isLe?: boolean;\n}\n\nexport function floatToU8a(value: String | string | number | Number = 0.0, { bitLength = 32, isLe = true }: Options = {}): Uint8Array {\n  if (bitLength !== 32 && bitLength !== 64) {\n    throw new Error('Invalid bitLength provided, expected 32 or 64');\n  }\n\n  const result = new Uint8Array(bitLength / 8);\n  const dv = new DataView(result.buffer, result.byteOffset);\n\n  if (bitLength === 32) {\n    dv.setFloat32(0, Number(value), isLe);\n  } else {\n    dv.setFloat64(0, Number(value), isLe);\n  }\n\n  return result;\n}\n","export { addHexPrefix } from './addPrefix.js';\nexport { hexFixLength } from './fixLength.js';\nexport { hexHasPrefix } from './hasPrefix.js';\nexport { hexStripPrefix } from './stripPrefix.js';\nexport { hexToBigInt } from './toBigInt.js';\nexport { hexToBn } from './toBn.js';\nexport { hexToNumber } from './toNumber.js';\nexport { hexToString } from './toString.js';\nexport { hexToU8a } from './toU8a.js';\n","\nimport { HEX_PREFIX, isHex } from '../is/hex.js';\n\n/**\n * @name hexHasPrefix\n * @summary Tests for the existence of a `0x` prefix.\n * @description\n * Checks for a valid hex input value and if the start matched `0x`\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexHasPrefix } from '@sola-hq/util';\n *\n * console.log('has prefix', hexHasPrefix('0x1234')); // => true\n * ```\n */\nexport function hexHasPrefix(value?: string | null | number): boolean {\n  if (typeof value !== 'string') return false;\n  return value.startsWith(HEX_PREFIX);\n}\n","\nimport { hexHasPrefix } from './hasPrefix.js';\n\n/**\n * @name addHexPrefix\n * @summary Adds the `0x` prefix to string values.\n * @description\n * Returns a `0x` prefixed string from the input value. If the input is already prefixed, it is returned unchanged.\n * @example\n * <BR>\n *\n * ```javascript\n * import { addHexPrefix } from '@sola-hq/utils';\n *\n * console.log('With prefix', addHexPrefix('0a0b12')); // => 0x0a0b12\n * ```\n */\nexport function addHexPrefix(value?: string | null | number): string {\n  if (hexHasPrefix(value)) return value as string;\n  if (typeof value === 'number') return `0x${value.toString(16)}`;\n  if (typeof value === 'string') return `0x${value && value.length % 2 === 1 ? '0' : ''}${value || ''}`;\n  return \"\";\n}\n","import { addHexPrefix } from './addPrefix.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n\n/**\n * @name hexFixLength\n * @summary Shifts a hex string to a specific bitLength\n * @description\n * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexFixLength } from '@sola-hq/util';\n *\n * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12\n * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012\n * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12\n * ```\n */\nexport function hexFixLength(value: string, bitLength = -1, withPadding = false): string {\n  const strLength = Math.ceil(bitLength / 4);\n  const hexLength = strLength + 2;\n\n  return addHexPrefix(\n    (bitLength === -1 || value.length === hexLength || (!withPadding && value.length < hexLength))\n      ? hexStripPrefix(value)\n      : (value.length > hexLength)\n        ? hexStripPrefix(value).slice(-1 * strLength)\n        : `${'0'.repeat(strLength)}${hexStripPrefix(value)}`.slice(-1 * strLength)\n  );\n}\n","\n\nimport { hexToBn } from './toBn.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n\n/**\n * @name hexToNumber\n * @summary Creates a Number value from a Buffer object.\n * @description\n * `null` inputs returns an NaN result, `hex` values return the actual value as a `Number`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToNumber } from '@sola-hq/util';\n *\n * hexToNumber('0x1234'); // => 0x1234\n * ```\n */\nexport function hexToNumber(value?: string | null): number {\n  if (!value) {\n    return NaN;\n  }\n\n  const stripped = hexStripPrefix(value);\n  const isNegative = stripped.length > 0 && parseInt(stripped[0], 16) >= 8;\n\n  return hexToBn(value, { isNegative }).toNumber();\n}\n","\n\nimport { u8aToString } from '../u8a/toString.js';\nimport { hexToU8a } from './toU8a.js';\n\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * Hex input values return the actual bytes value converted to a string. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToString } from '@sola-hq/util';\n *\n * hexToU8a('0x68656c6c6f'); // hello\n * ```\n */\nexport function hexToString(_value?: string | null): string {\n  return u8aToString(\n    hexToU8a(_value)\n  );\n}\n","export { isArray } from './array.js';\nexport { isAscii } from './ascii.js';\nexport { isBigInt } from './bigint.js';\nexport { isBn } from './bn.js';\nexport { isBoolean } from './boolean.js';\nexport { isBuffer } from './buffer.js';\nexport { isError } from './error.js';\nexport { isFunction } from './function.js';\nexport { isHex } from './hex.js';\nexport { isJsonObject } from './jsonObject.js';\nexport { isNull } from './null.js';\nexport { isNumber, isNumberLike } from './number.js';\nexport { isObject } from './object.js';\nexport { isString } from './string.js';\nexport { isToBigInt } from './toBigInt.js';\nexport { isToBn } from './toBn.js';\nexport { isU8a } from './u8a.js';\nexport { isUndefined } from './undefined.js';\nexport { isUtf8 } from './utf8.js';\n","export function isArray<T>(value?: unknown): value is T[] {\n  return Array.isArray(value);\n}\n","/**\n * @name isString\n * @summary Tests for a string.\n * @description\n * Checks to see if the input value is a JavaScript string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isString } from '@sola-hq/util';\n *\n * console.log('isString', isString('test')); // => true\n * ```\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { U8aLike } from '../types.js';\nimport { u8aToU8a } from '../u8a/toU8a.js';\nimport { isHex } from './hex.js';\nimport { isString } from './string.js';\n\n/** @internal */\nfunction isAsciiStr(str: string): boolean {\n  for (let i = 0, count = str.length; i < count; i++) {\n    const b = str.charCodeAt(i);\n\n    // check is inlined here, it is faster than making a call\n    if (b < 32 || b > 126) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** @internal */\nfunction isAsciiBytes(u8a: Uint8Array | number[]): boolean {\n  for (let i = 0, count = u8a.length; i < count; i++) {\n    const b = u8a[i] | 0;\n\n    // check is inlined here, it is faster than making a call\n    if (b < 32 || b > 126) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @name isAscii\n * @summary Tests if the input is printable ASCII\n * @description\n * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters\n */\nexport function isAscii(value?: U8aLike | null): boolean {\n  return isString(value)\n    ? isHex(value)\n      ? isAsciiBytes(u8aToU8a(value))\n      : isAsciiStr(value)\n    : value\n      ? isAsciiBytes(value)\n      : false;\n}\n","\n\nimport { isString } from \"./string.js\";\n\n/**\n * @name isBoolean\n * @summary Tests for a boolean value.\n * @description\n * Checks to see if the input value is a JavaScript boolean.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isBoolean } from '@sola-hq/util';\n *\n * isBoolean(false); // => true\n * ```\n */\nexport function isBoolean(value: unknown): value is boolean {\n  return typeof value === 'boolean';\n}\n\n/**\n * @name isBooleanLike\n * @summary Tests for a boolean-like value.\n * @description\n * Checks to see if the input value is a JavaScript boolean, number, or string.\n */\nexport function isBooleanLike(value: unknown): value is boolean | number | string {\n  if (typeof value === 'boolean') return true;\n  if (typeof value === 'number') return value === 0 || value === 1;\n  if (isString(value)) {\n    const set = new Set(['true', 'false', '1', '0', 'yes', 'no', 'y', 'n']);\n    return set.has(value.toLowerCase());\n  }\n  return false;\n}","export function isError(value: unknown): value is Error {\n  return (\n    ((value && (value as Error).constructor) === Error) ||\n    value instanceof Error\n  );\n}\n","export function isFunction(value: unknown): value is Function {\n  return typeof value === 'function';\n}\n","\nimport { isBigInt } from './is/bigint.js';\n\nexport function stringify(value: unknown, space?: string | number): string {\n  return JSON.stringify(value, (_, v) => isBigInt(v) ? v.toString() : v, space);\n}\n","\n\nimport { stringify } from '../stringify.js';\n\n/**\n * @name isJsonObject\n * @summary Tests for a valid JSON `object`.\n * @description\n * Checks to see if the input value is a valid JSON object.\n * It returns false if the input is JSON parsable, but not an Javascript object.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isJsonObject } from '@sola-hq/utils';\n *\n * isJsonObject({}); // => true\n * isJsonObject({\n *  \"Test\": \"1234\",\n *  \"NestedTest\": {\n *   \"Test\": \"5678\"\n *  }\n * }); // => true\n * isJsonObject(1234); // JSON parsable, but not an object =>  false\n * isJsonObject(null); // JSON parsable, but not an object => false\n * isJsonObject('not an object'); // => false\n * ```\n */\nexport function isJsonObject(value: unknown): value is Record<string, unknown> {\n  const str = typeof value !== 'string'\n    ? stringify(value)\n    : value;\n\n  try {\n    const obj = JSON.parse(str) as unknown;\n\n    return typeof obj === 'object' && obj !== null;\n  } catch {\n    return false;\n  }\n}\n","\n\n/**\n * @name isNull\n * @summary Tests for a `null` values.\n * @description\n * Checks to see if the input value is `null`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isNull } from '@sola-hq/util';\n *\n * console.log('isNull', isNull(null)); // => true\n * ```\n */\nexport function isNull(value?: unknown): value is null {\n  return value === null;\n}\n","export function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\nexport const isNumberLike = (value: unknown): value is number => {\n  if (typeof value === 'number') return true;\n  if (typeof value === 'string') return !isNaN(Number(value));\n  if (typeof value === 'bigint') return !isNaN(Number(value));\n  return false;\n}","export function isObject<T = unknown>(value?: unknown): value is T {\n  return !!value && typeof value === 'object';\n}\n","export function isUndefined(value?: unknown): value is undefined {\n  return value === undefined;\n}\n","\n\n// Adapted from https://github.com/JulienPalard/is_utf8/blob/master/is_utf8.c\n\nimport { u8aToU8a } from '../u8a/toU8a.js';\nimport { isString } from './string.js';\n\n/**\n * @name isUtf8\n * @summary Tests if the input is valid Utf8\n * @description\n * Checks to see if the input string or Uint8Array is valid Utf8\n */\nexport function isUtf8(value?: number[] | Uint8Array | string | null): boolean {\n  if (!value) {\n    return isString(value);\n  }\n\n  const u8a = u8aToU8a(value);\n  const len = u8a.length;\n  let i = 0;\n\n  while (i < len) {\n    if (u8a[i] <= 0x7F) /* 00..7F */ {\n      i += 1;\n    } else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF) /* C2..DF 80..BF */ {\n      if (i + 1 < len) /* Expect a 2nd byte */ {\n        if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n          // *message = \"After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte between C2 and DF, expecting a 2nd byte.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 2;\n    } else if (u8a[i] === 0xE0) /* E0 A0..BF 80..BF */ {\n      if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n        if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {\n          // *message = \"After a first byte of E0, expecting a 2nd byte between A0 and BF.\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n\n        if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n          // *message = \"After a first byte of E0, expecting a 3nd byte between 80 and BF.\";\n          // *faulty_bytes = 3;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte of E0, expecting two following bytes.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 3;\n    } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC) /* E1..EC 80..BF 80..BF */ {\n      if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n        if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n          // *message = \"After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n\n        if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n          // *message = \"After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.\";\n          // *faulty_bytes = 3;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte between E1 and EC, expecting two following bytes.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 3;\n    } else if (u8a[i] === 0xED) /* ED 80..9F 80..BF */ {\n      if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n        if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {\n          // *message = \"After a first byte of ED, expecting 2nd byte between 80 and 9F.\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n\n        if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n          // *message = \"After a first byte of ED, expecting 3rd byte between 80 and BF.\";\n          // *faulty_bytes = 3;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte of ED, expecting two following bytes.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 3;\n    } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF) /* EE..EF 80..BF 80..BF */ {\n      if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n        if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n          // *message = \"After a first byte between EE and EF, expecting 2nd byte between 80 and BF.\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n\n        if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n          // *message = \"After a first byte between EE and EF, expecting 3rd byte between 80 and BF.\";\n          // *faulty_bytes = 3;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte between EE and EF, two following bytes.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 3;\n    } else if (u8a[i] === 0xF0) /* F0 90..BF 80..BF 80..BF */ {\n      if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n        if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {\n          // *message = \"After a first byte of F0, expecting 2nd byte between 90 and BF.\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n\n        if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n          // *message = \"After a first byte of F0, expecting 3rd byte between 80 and BF.\";\n          // *faulty_bytes = 3;\n          return false;\n        }\n\n        if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n          // *message = \"After a first byte of F0, expecting 4th byte between 80 and BF.\";\n          // *faulty_bytes = 4;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte of F0, expecting three following bytes.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 4;\n    } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3) /* F1..F3 80..BF 80..BF 80..BF */ {\n      if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n        if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n          // *message = \"After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n\n        if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n          // *message = \"After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.\";\n          // *faulty_bytes = 3;\n          return false;\n        }\n\n        if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n          // *message = \"After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.\";\n          // *faulty_bytes = 4;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte of F1, F2, or F3, expecting three following bytes.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 4;\n    } else if (u8a[i] === 0xF4) /* F4 80..8F 80..BF 80..BF */ {\n      if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n        if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {\n          // *message = \"After a first byte of F4, expecting 2nd byte between 80 and 8F.\";\n          // *faulty_bytes = 2;\n          return false;\n        }\n\n        if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n          // *message = \"After a first byte of F4, expecting 3rd byte between 80 and BF.\";\n          // *faulty_bytes = 3;\n          return false;\n        }\n\n        if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n          // *message = \"After a first byte of F4, expecting 4th byte between 80 and BF.\";\n          // *faulty_bytes = 4;\n          return false;\n        }\n      } else {\n        // *message = \"After a first byte of F4, expecting three following bytes.\";\n        // *faulty_bytes = 1;\n        return false;\n      }\n\n      i += 4;\n    } else {\n      // *message = \"Expecting bytes in the following ranges: 00..7F C2..F4.\";\n      // *faulty_bytes = 1;\n      return false;\n    }\n  }\n\n  return true;\n}\n","\n\n/**\n * @summary Utility methods to convert to and from `number` values\n */\n\nexport { numberToHex } from './toHex.js';\nexport { numberToU8a } from './toU8a.js';\n","import { hexFixLength } from '../hex/fixLength.js';\n\n/**\n * @name numberToHex\n * @summary Creates a hex value from a number.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `0x` result. `number` input values return the actual bytes value converted to a `hex`. With `bitLength` set, it converts the number to the equivalent size.\n * @example\n * <BR>\n *\n * ```javascript\n * import { numberToHex } from '@sola-hq/util';\n *\n * numberToHex(0x1234); // => '0x1234'\n * numberToHex(0x1234, 32); // => 0x00001234\n * ```\n */\nexport function numberToHex(value?: number | null, bitLength = -1): string {\n  if (!value || Number.isNaN(value)) {\n    return hexFixLength('0', bitLength, true);\n  }\n\n  let hex: string;\n  if (value < 0) {\n    // Convert to two's complement for negative numbers\n    const effectiveBitLength = bitLength === -1 ? Math.ceil(Math.log2(Math.abs(value) + 1) / 8) * 8 : bitLength;\n    const twoPowN = 1 << effectiveBitLength;\n    hex = (twoPowN + value).toString(16);\n  } else {\n    hex = value.toString(16);\n  }\n\n  return hexFixLength(hex.length % 2 ? `0${hex}` : hex, bitLength, true);\n}\n","\n\nimport { hexToU8a } from '../hex/toU8a.js';\nimport { numberToHex } from './toHex.js';\n\n/**\n * @name numberToU8a\n * @summary Creates a Uint8Array object from a number.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `number` input values return the actual bytes value converted to a `Uint8Array`. With `bitLength`, it converts the value to the equivalent size.\n * @example\n * <BR>\n *\n * ```javascript\n * import { numberToU8a } from '@sola-hq/util';\n *\n * numberToU8a(0x1234); // => [0x12, 0x34]\n * ```\n */\nexport function numberToU8a(value?: number | null, bitLength = -1): Uint8Array {\n  return hexToU8a(\n    numberToHex(value, bitLength), bitLength\n  );\n}\n","export * from './toBase58.js';\nexport * from './toU8a.js';\n\n","\nimport { base58 } from '@scure/base';\n\nexport function base58ToU8a(value: string): Uint8Array {\n  return base58.decode(value);\n}\n","\nexport * from './toBase64.js';\nexport * from './toU8a.js';","import { base64 } from '@scure/base';\n\nimport { U8aLike } from '../types.js';\nimport { u8aToU8a } from '../u8a/toU8a.js';\n\nexport function toBase64(value: U8aLike): string {\n  return base64.encode(u8aToU8a(value));\n}\n","\nimport { u8aToU8a } from '../u8a/toU8a.js';\nimport { base64 } from '@scure/base';\n\nexport function base64ToU8a(value: string): Uint8Array {\n  return base64.decode(value);\n}\n","export * from './toHex.js';\nexport * from './toU8a.js';","import { u8aToHex } from '../u8a/toHex.js';\nimport { stringToU8a } from './toU8a.js'\n\n/**\n * @name stringToHex\n * @summary Creates a hex string from a utf-8 string\n * @description\n * String input values return the actual encoded hex value.\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringToHex } from '@sola-hq/util';\n *\n * stringToU8a('hello'); // 0x68656c6c6f\n * ```\n */\nexport function stringToHex(value?: string): string {\n  return u8aToHex(\n    stringToU8a(value)\n  );\n}\n","import type { BN } from './bn/bn.js';\n\nexport type Nullable<T> = T | null | undefined;\n\n/**\n * @description Interface for objects that have a toBigInt method\n * @interface ToBigInt\n * @property toBigInt - A function that returns a bigint\n */\nexport interface ToBigInt {\n  toBigInt: () => bigint;\n}\n\n/**\n * @description Interface for objects that have a toBn method\n * @interface ToBn\n * @property toBn - A function that returns a BN\n */\nexport interface ToBn {\n  toBn: () => BN;\n}\n\n\nexport interface ToBnOptions {\n  /** Convert in LE format */\n  isLe?: boolean;\n  /** Number is signed, apply two's complement */\n  isNegative?: boolean;\n}\n\n/**\n * @description Interface for options to convert to a number\n * @interface ToNumberOptions\n * @property isLe - Convert in LE format\n * @property isNegative - Number is signed, apply two's complement\n * @property bitLength - Limit to the specified bitLength, despite input length\n */\nexport interface ToNumberOptions extends ToBnOptions {\n  /** Limit to the specified bitLength, despite input length */\n  bitLength?: number;\n}\n\nexport type U8aLike = number[] | Uint8Array | string;\n\n\nexport type BoolLike = boolean | number | string;","import type { U8aLike } from '../types.js';\n\nimport { u8aToU8a } from '../u8a/toU8a.js';\nimport { toBase64 } from '../base64/index.js';\n\n/**\n * @name u8aToBn\n * @summary Creates a BN from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.\n * @param value The value to convert\n * @param options Options to pass while converting\n * @param options.isLe Convert using Little Endian (default)\n * @param options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToBn } from '@sola-hq/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\nexport function u8aToBase64(value: U8aLike): string {\n  return toBase64(u8aToU8a(value));\n}"]}